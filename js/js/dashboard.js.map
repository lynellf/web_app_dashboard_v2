{"version":3,"sources":["rounded-bar.js","traffic-data.js","canvas-selectors.js","users.js","toggle-charts.js","close-modal.js","message-user.js","notifications.js","settings-config.js"],"names":[],"mappingsxtNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../dashboard.js","sourcesContent":["// draws a rectangle with a rounded top\r\nChart.helpers.drawRoundedTopRectangle = function(\r\n    ctx,\r\n    x,\r\n    y,\r\n    width,\r\n    height,\r\n    radius\r\n) {\r\n    ctx.beginPath();\r\n    ctx.moveTo(x + radius, y);\r\n    // top right corner\r\n    ctx.lineTo(x + width - radius, y);\r\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n    // bottom right\tcorner\r\n    ctx.lineTo(x + width, y + height);\r\n    // bottom left corner\r\n    ctx.lineTo(x, y + height);\r\n    // top left\r\n    ctx.lineTo(x, y + radius);\r\n    ctx.quadraticCurveTo(x, y, x + radius, y);\r\n    ctx.closePath();\r\n};\r\n\r\nChart.elements.RoundedTopRectangle = Chart.elements.Rectangle.extend({\r\n    draw: function() {\r\n        var ctx = this._chart.ctx;\r\n        var vm = this._view;\r\n        var left, right, top, bottom, signX, signY, borderSkipped;\r\n        var borderWidth = vm.borderWidth;\r\n\r\n        if (!vm.horizontal) {\r\n            // bar\r\n            left = vm.x - vm.width / 2;\r\n            right = vm.x + vm.width / 2;\r\n            top = vm.y;\r\n            bottom = vm.base;\r\n            signX = 1;\r\n            signY = bottom > top ? 1 : -1;\r\n            borderSkipped = vm.borderSkipped || 'bottom';\r\n        } else {\r\n            // horizontal bar\r\n            left = vm.base;\r\n            right = vm.x;\r\n            top = vm.y - vm.height / 2;\r\n            bottom = vm.y + vm.height / 2;\r\n            signX = right > left ? 1 : -1;\r\n            signY = 1;\r\n            borderSkipped = vm.borderSkipped || 'left';\r\n        }\r\n\r\n        // Canvas doesn't allow us to stroke inside the width so we can\r\n        // adjust the sizes to fit if we're setting a stroke on the line\r\n        if (borderWidth) {\r\n            // borderWidth shold be less than bar width and bar height.\r\n            var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\r\n            borderWidth = borderWidth > barSize ? barSize : borderWidth;\r\n            var halfStroke = borderWidth / 2;\r\n            // Adjust borderWidth when bar top position is near vm.base(zero).\r\n            var borderLeft =\r\n        left + (borderSkipped !== 'left' ? halfStroke * signX : 0);\r\n            var borderRight =\r\n        right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);\r\n            var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);\r\n            var borderBottom =\r\n        bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);\r\n            // not become a vertical line?\r\n            if (borderLeft !== borderRight) {\r\n                top = borderTop;\r\n                bottom = borderBottom;\r\n            }\r\n            // not become a horizontal line?\r\n            if (borderTop !== borderBottom) {\r\n                left = borderLeft;\r\n                right = borderRight;\r\n            }\r\n        }\r\n\r\n        // calculate the bar width and roundess\r\n        var barWidth = Math.abs(left - right);\r\n        var roundness = this._chart.config.options.barRoundness || 0.5;\r\n        var radius = barWidth * roundness * 0.5;\r\n\r\n        // keep track of the original top of the bar\r\n        var prevTop = top;\r\n\r\n        // move the top down so there is room to draw the rounded top\r\n        top = prevTop + radius;\r\n        var barRadius = top - prevTop;\r\n\r\n        ctx.beginPath();\r\n        ctx.fillStyle = vm.backgroundColor;\r\n        ctx.strokeStyle = vm.borderColor;\r\n        ctx.lineWidth = borderWidth;\r\n\r\n        // draw the rounded top rectangle\r\n        Chart.helpers.drawRoundedTopRectangle(\r\n            ctx,\r\n            left,\r\n            top - barRadius + 1,\r\n            barWidth,\r\n            bottom - prevTop,\r\n            barRadius\r\n        );\r\n\r\n        ctx.fill();\r\n        if (borderWidth) {\r\n            ctx.stroke();\r\n        }\r\n\r\n        // restore the original top value so tooltips and scales still work\r\n        top = prevTop;\r\n    },\r\n});\r\n\r\nChart.defaults.roundedBar = Chart.helpers.clone(Chart.defaults.bar);\r\n\r\nChart.controllers.roundedBar = Chart.controllers.bar.extend({\r\n    dataElementType: Chart.elements.RoundedTopRectangle,\r\n});\r\n","var weeklyData = {\r\n        type: 'line',\r\n        data: {\r\n            labels: [\r\n                '16-22',\r\n                '23-29',\r\n                '30-5',\r\n                '6-12',\r\n                '13-19',\r\n                '20-26',\r\n                '27-3',\r\n                '4-10',\r\n                '11-17',\r\n                '18-24',\r\n                '25-31',\r\n            ],\r\n            datasets: [\r\n                {\r\n                    data: [\r\n                        800,\r\n                        1300,\r\n                        1050,\r\n                        1500,\r\n                        2000,\r\n                        1450,\r\n                        1800,\r\n                        1300,\r\n                        1600,\r\n                        2300,\r\n                        2000,\r\n                        2300,\r\n                        2450,\r\n                    ],\r\n                    borderColor: '#7477BF',\r\n                    backgroundColor: 'rgba(212, 214, 231, 0.46)',\r\n                    fill: true,\r\n                    lineTension: 0,\r\n                    pointRadius: 8,\r\n                    pointBackgroundColor: 'white',\r\n                },\r\n            ],\r\n        },\r\n        options: {\r\n            legend: {\r\n                display: false,\r\n            },\r\n            responsive: true,\r\n        },\r\n    },\r\n    hourlyData = {\r\n        type: 'line',\r\n        data: {\r\n            labels: [\r\n                '1-3',\r\n                '4-6',\r\n                '7-9',\r\n                '10-12',\r\n                '13-15',\r\n                '16-18',\r\n                '19-21',\r\n                '22-24',\r\n            ],\r\n            datasets: [\r\n                {\r\n                    data: [\r\n                        800,\r\n                        1300,\r\n                        1050,\r\n                        1500,\r\n                        2000,\r\n                        1450,\r\n                        1800,\r\n                        1300,\r\n                        1600,\r\n                        2300,\r\n                        2000,\r\n                        2300,\r\n                        2450,\r\n                    ],\r\n                    borderColor: '#7477BF',\r\n                    backgroundColor: 'rgba(212, 214, 231, 0.46)',\r\n                    fill: true,\r\n                    lineTension: 0,\r\n                    pointRadius: 8,\r\n                    pointBackgroundColor: 'white',\r\n                },\r\n            ],\r\n        },\r\n        options: {\r\n            legend: {\r\n                display: false,\r\n            },\r\n            responsive: true,\r\n        },\r\n    },\r\n    dailyData = {\r\n        type: 'line',\r\n        data: {\r\n            labels: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\r\n            datasets: [\r\n                {\r\n                    data: [\r\n                        800,\r\n                        1300,\r\n                        1050,\r\n                        1500,\r\n                        2000,\r\n                        1450,\r\n                        1800,\r\n                        1300,\r\n                        1600,\r\n                        2300,\r\n                        2000,\r\n                        2300,\r\n                        2450,\r\n                    ],\r\n                    borderColor: '#7477BF',\r\n                    backgroundColor: 'rgba(212, 214, 231, 0.46)',\r\n                    fill: true,\r\n                    lineTension: 0,\r\n                    pointRadius: 8,\r\n                    pointBackgroundColor: 'white',\r\n                },\r\n            ],\r\n        },\r\n        options: {\r\n            legend: {\r\n                display: false,\r\n            },\r\n            responsive: true,\r\n        },\r\n    },\r\n    monthlyData = {\r\n        type: 'line',\r\n        data: {\r\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n            datasets: [\r\n                {\r\n                    data: [\r\n                        800,\r\n                        1300,\r\n                        1050,\r\n                        1500,\r\n                        2000,\r\n                        1450,\r\n                        1800,\r\n                        1300,\r\n                        1600,\r\n                        2300,\r\n                        2000,\r\n                        2300,\r\n                        2450,\r\n                    ],\r\n                    borderColor: '#7477BF',\r\n                    backgroundColor: 'rgba(212, 214, 231, 0.46)',\r\n                    fill: true,\r\n                    lineTension: 0,\r\n                    pointRadius: 8,\r\n                    pointBackgroundColor: 'white',\r\n                },\r\n            ],\r\n        },\r\n        options: {\r\n            legend: {\r\n                display: false,\r\n            },\r\n            responsive: true,\r\n        },\r\n    },\r\n    barData = {\r\n        type: 'roundedBar',\r\n        data: {\r\n            labels: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\r\n            datasets: [\r\n                {\r\n                    backgroundColor: '#4D4B72',\r\n                    data: [75, 105, 165, 125, 225, 198, 98],\r\n                },\r\n            ],\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            legend: { display: false },\r\n            title: {\r\n                display: true,\r\n            },\r\n        },\r\n    },\r\n    doughnutData = {\r\n        type: 'doughnut',\r\n        data: {\r\n            labels: ['Phones', 'Tablets', 'Desktop'],\r\n            datasets: [\r\n                {\r\n                    backgroundColor: ['#77B988', '#68A6B1', '#4D4B72'],\r\n                    data: [25, 25, 75],\r\n                },\r\n            ],\r\n        },\r\n        options: {\r\n            responsive: true,\r\n            elements: {\r\n                arc: {\r\n                    borderWidth: 0,\r\n                },\r\n            },\r\n            legend: {\r\n                display: true,\r\n                position: 'right',\r\n                labels: {\r\n                    boxWidth: 20,\r\n                },\r\n            },\r\n        },\r\n    };","// Step Three (b): Style the charts to match the overall style of the dashboard.\r\n\r\n//    <!-- Step Three (b): Style the charts to match the overall style of the dashboard. -->\r\n//    <!-- Step Three (c): You will need to make up this data - you can see the mockup for sample data -->\r\n//    <!-- Step Three -->\r\n\r\n\r\n\r\n// Step Three (a): using chart.js create and include the information for the following chart widgets as shown in the mockup for the 1. web traffic\r\n\r\nvar lineChartSmall = document.querySelector('.traffic__ranged--small'),\r\n    lineChartLarge = document.querySelector('.traffic__ranged--large'),\r\n\r\n    \r\n    trafficDaily = document.querySelector('#trafficBar'),\r\n    trafficMobile = document.querySelector('#trafficPie'),\r\n    rangedTrafficSmall = new Chart(lineChartSmall, hourlyData),\r\n    rangedTrafficLarge = new Chart(lineChartLarge, hourlyData),\r\n    // Bar chart\r\n    dailyTrafficBarChart = new Chart(trafficDaily, barData),\r\n    mobileTrafficDoughnutChart = new Chart(trafficMobile, doughnutData);\r\n","// Add an \"autocomplete\" feature for the \"Search for User\" box, listing \r\n// names that match the searh term\r\n\r\nvar userElements = document.querySelectorAll('.members__name'),\r\n    searchBox = document.querySelector('.members__input'),\r\n    autocomplete = new autoComplete({\r\n        selector: '.members__input',\r\n        minChars: 2,\r\n        source: function(term, suggest) {\r\n            term = term.toLowerCase();\r\n            var userNames = [],\r\n                suggestions = [];\r\n            for (var i = 0; i < userElements.length; i++) {\r\n                userNames.push(userElements[i].textContent);\r\n            }\r\n            for (var j = 0; j < userNames.length; j++) {\r\n                if(~userNames[j].toLowerCase().indexOf(term)) {\r\n                    suggestions.push(userNames[j]);\r\n                    suggest(suggestions);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n","// Create a navigation similar to the one in the mockup when the Hours, Daily, Weekly and Monthly button is selected. Add functionality to the Hourly, Daily, Weekly and Monthly buttons so that a different line chart is displayed on click.\r\n\r\nvar timeOptions = document.querySelectorAll('.traffic__list li');\r\n\r\n// Load previous configuration from localStorage and set classNames accordingly\r\nif (localStorage.trafficIndex) {\r\n    var index = localStorage.trafficIndex;\r\n    for (var k = 0; k < timeOptions.length; k++) {\r\n        timeOptions[k].className = 'traffic__option';\r\n    }\r\n    timeOptions[index].className = 'traffic__option--active';\r\n}\r\n\r\nfor (var i = 0; i < timeOptions.length; i++) {\r\n    timeOptions[i].addEventListener('click', function(event) {\r\n        var optionNodes = Array.prototype.slice.call(timeOptions),\r\n            eventIndex = optionNodes.indexOf(event.target);\r\n        localStorage.setItem('trafficIndex', eventIndex.toString());\r\n        for (var j = 0; j < timeOptions.length; j++) {\r\n            // Resetting all of the classes for both the options and charts.\r\n            timeOptions[j].className = 'traffic__option';\r\n        }\r\n        // Setting the active chart and corresponding option classes.\r\n        event.target.className = 'traffic__option--active';\r\n\r\n        if (eventIndex === 0) {\r\n            rangedTrafficSmall = new Chart(lineChartSmall, hourlyData);\r\n            rangedTrafficLarge = new Chart(lineChartLarge, hourlyData);\r\n        } else if (eventIndex === 1) {\r\n            rangedTrafficSmall = new Chart(lineChartSmall, dailyData);\r\n            rangedTrafficLarge = new Chart(lineChartLarge, dailyData);\r\n        } else if (eventIndex === 2) {\r\n            rangedTrafficSmall = new Chart(lineChartSmall, weeklyData);\r\n            rangedTrafficLarge = new Chart(lineChartLarge, weeklyData);\r\n        } else if (eventIndex === 3) {\r\n            rangedTrafficSmall = new Chart(lineChartSmall, monthlyData);\r\n            rangedTrafficLarge = new Chart(lineChartLarge, monthlyData);\r\n        }\r\n    });\r\n}\r\n","// Step Two (a): Alert bar should be visible at the top but able to be\r\n// closed when clicking the X button \r\n\r\nvar alertParent = document.querySelector('.search'),\r\n    alert = document.querySelector('.search__alert'),\r\n    xIcon = document.querySelector('.icon--close'),\r\n    alertClosed = false;\r\n\r\n// Check localStorage for previously closed alert and adjust accordingly\r\nif(localStorage.alertClosed) {\r\n    if(localStorage.alertClosed === 'true') {\r\n        alertClosed = true;\r\n    }\r\n\r\n    if(alertClosed === true) {\r\n        alertParent.removeChild(alert);\r\n    }\r\n}\r\n\r\nxIcon.addEventListener('click', function() {\r\n    alertParent.removeChild(alert);\r\n    alertClosed = true;\r\n    localStorage.setItem('alertClosed', 'true');\r\n});","// Step Five (e): Use JS to display error messages if a user isn't selected\r\n// or the message field is empty\r\n\r\nvar searchErrorSpan = document.querySelector('#searchError'),\r\n    textAreaErrorSpan = document.querySelector('#textError'),\r\n    successMessageSpan = document.querySelector('#successMessage'),\r\n    submitButton = document.querySelector('.members__submit'),\r\n    messageBox = document.querySelector('.members__textarea');\r\n\r\nsubmitButton.addEventListener('click', function(event) {\r\n    if (searchBox.value.length > 0 && messageBox.value.length > 0) {\r\n        successMessageSpan.className = 'members__success-message--active';\r\n        successMessageSpan.textContent = 'Message Sent!';\r\n        searchBox.value = '';\r\n    } else if (searchBox.value.length === 0) {\r\n        searchErrorSpan.textContent = 'Please enter a name to search';\r\n        searchErrorSpan.className = 'members__search-error--active';\r\n        successMessageSpan.textContent = '';\r\n        successMessageSpan.classNamee = 'members__success-message';\r\n    } else {\r\n        searchBox.value = '';\r\n        searchErrorSpan.textContent = '';\r\n        searchErrorSpan.className = 'members__search-error';\r\n    }\r\n    if (messageBox.value.length === 0) {\r\n        textAreaErrorSpan.textContent = 'Please enter a message';\r\n        textAreaErrorSpan.className = 'members__text-error--active';\r\n    } else {\r\n        messageBox.value = '';\r\n        textAreaErrorSpan.textContent = '';\r\n        textAreaErrorSpan.className = 'members__text-error';\r\n    }\r\n\r\n    event.preventDefault();\r\n});\r\n","var alertMsgs = [\r\n        'Iboya Vat commented on YourApp\\'s SEO Tips',\r\n        'Aapo Niskanen liked the post Facebook\\'s Changes for 2018',\r\n        'Phillip Cox commented on Facebook\\'s Changes for 2018',\r\n        'Zilda Moreira posted YourApp\\'s SEO Tips'\r\n    ],\r\n    dropdownContent = document.querySelector('#dropdownContent'),\r\n    bell = document.querySelector('#notificationBell'),\r\n    notificationSignal = document.querySelector('#notificationSignal'),\r\n    alertStatus = true,\r\n    dropdownStatus = false;\r\n\r\n// Check localStorage for alertStatus and set accordingly\r\n\r\nif(localStorage.alertState) {\r\n    if(localStorage.alertState === 'false') {\r\n        alertStatus = false;\r\n    }\r\n    if (alertStatus === false) {\r\n        notificationSignal.style.display = 'none';\r\n    }\r\n}\r\n\r\nbell.addEventListener('click', function() {\r\n    if(dropdownStatus === false) {\r\n        dropdownContent.className = 'dropdown__content--active';\r\n        for (var i = 0; i < alertMsgs.length; i++) {\r\n            var item = document.createElement('span');\r\n            item.className = 'dropdown__item';\r\n            item.textContent = alertMsgs[i];\r\n            dropdownContent.appendChild(item);\r\n        }\r\n        notificationSignal.style.display = 'none';\r\n        dropdownStatus = true;\r\n    } else if(dropdownStatus === true) {\r\n        while (dropdownContent.firstChild) {\r\n            dropdownContent.className = 'dropdown__content';\r\n            dropdownContent.removeChild(dropdownContent.firstChild);\r\n        }\r\n        dropdownStatus = false;\r\n    }\r\n});\r\n\r\ndocument.addEventListener('click', function(event) {\r\n    if (dropdownStatus === true && event.target !== bell) {\r\n        while (dropdownContent.firstChild) {\r\n            dropdownContent.className = 'dropdown__content';\r\n            dropdownContent.removeChild(dropdownContent.firstChild);\r\n        }\r\n        dropdownStatus = false;\r\n        alertStatus = false;\r\n        localStorage.setItem('alertState', 'false');\r\n    }\r\n});\r\n\r\n\r\n","var emailSwitch = document.querySelector('#emailSwitch'),\r\n    profileSwitch = document.querySelector('#profileSwitch'),\r\n    timeZone = document.querySelector('#dropdownTimeZone'),\r\n    saveButton = document.querySelector('#saveButton'),\r\n    selectedZone = '',\r\n    emailStatus = false,\r\n    profileStatus = false;\r\n\r\n// Check localStorage and set values accordingly\r\n\r\nif(localStorage.emailStatus) {\r\n    var emailValue = localStorage.emailStatus;\r\n\r\n    if(emailValue === 'true') {\r\n        emailStatus = true;\r\n    } else {\r\n        emailStatus = false;\r\n    }\r\n\r\n    if(emailStatus === true) {\r\n        emailSwitch.checked = 'checked';\r\n    } else {\r\n        emailSwitch.checked = '';\r\n    }\r\n}\r\n\r\nif (localStorage.profileStatus) {\r\n    var profileValue = localStorage.profileStatus;\r\n\r\n    if (profileValue === 'true') {\r\n        profileStatus = true;\r\n    } else {\r\n        profileStatus = false;\r\n    }\r\n\r\n    if (profileStatus === true) {\r\n        profileSwitch.checked = 'checked';\r\n    } else {\r\n        profileSwitch.checked = '';\r\n    }\r\n}\r\n\r\nif(localStorage.timeZone) {\r\n    timeZone.value = localStorage.timeZone;\r\n}\r\n\r\nemailSwitch.addEventListener('click', function() {\r\n    emailStatus = !emailStatus;\r\n});\r\n\r\nprofileSwitch.addEventListener('click', function() {\r\n    profileStatus = !profileStatus;\r\n});\r\n\r\ntimeZone.addEventListener('change', function() {\r\n    selectedZone = timeZone.value;\r\n});\r\n\r\nsaveButton.addEventListener('click', function() {\r\n    localStorage.setItem('timeZone', selectedZone);\r\n    localStorage.setItem('profileStatus', profileStatus.toString());\r\n    localStorage.setItem('emailStatus', emailStatus.toString());\r\n})\r\n"]}